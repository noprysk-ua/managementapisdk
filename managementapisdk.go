// Package managementapisdk provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.3 DO NOT EDIT.
package managementapisdk

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
)

const (
	ApiKeyAuthScopes = "ApiKeyAuth.Scopes"
)

// Defines values for ClusterState.
const (
	ClusterStateActive ClusterState = "Active"

	ClusterStateFailed ClusterState = "Failed"

	ClusterStatePendingCreation ClusterState = "PendingCreation"

	ClusterStateResuming ClusterState = "Resuming"

	ClusterStateSuspended ClusterState = "Suspended"

	ClusterStateSuspending ClusterState = "Suspending"

	ClusterStateTerminated ClusterState = "Terminated"

	ClusterStateTransitioning ClusterState = "Transitioning"
)

// Defines values for RegionProvider.
const (
	RegionProviderAWS RegionProvider = "AWS"

	RegionProviderAzure RegionProvider = "Azure"

	RegionProviderGCP RegionProvider = "GCP"
)

// Represents information related to a cluster
type Cluster struct {
	// A unique identifier for the cluster
	ClusterID string `json:"clusterID"`

	// The timestamp of when the cluster was created
	CreatedAt string `json:"createdAt"`

	// The timestamp of when the cluster will expire
	ExpiresAt *string `json:"expiresAt,omitempty"`

	// The list of allowed incoming IP addresses
	FirewallRanges *[]string `json:"firewallRanges,omitempty"`

	// The host or IP address of the SingleStore database
	Host *string `json:"host,omitempty"`

	// Name of the cluster
	Name string `json:"name"`

	// The port of the SingleStore database
	Port *float32 `json:"port,omitempty"`

	// Represents information related to a region in which a cluster is created
	Region Region `json:"region"`

	// Size of the cluster (in cluster size notation), such as S-00 or S-1
	Size string `json:"size"`

	// State of the cluster
	State ClusterState `json:"state"`

	// (If included in the output) The timestamp of when the cluster was terminated
	TerminatedAt *string `json:"terminatedAt,omitempty"`

	// Size of the cluster (in units), such as 0.25 or 1.0
	Units float32 `json:"units"`

	// The SingleStore version
	Version string `json:"version"`
}

// State of the cluster
type ClusterState string

// Represents the variables specified while creating a cluster
type ClusterCreate struct {
	// The admin password for the cluster. The password must contain:
	//
	//   * At least 8 characters
	//   * At least one uppercase character
	//   * At least one lowercase character
	//   * At least one number or special character
	//
	// If a password is not specified at cluster creation, a password is generated and returned in the response object.
	AdminPassword *string `json:"adminPassword,omitempty"`

	// The timestamp of when the cluster will expire. If the expiration time is not specified, the cluster will have no expiration time. Expiration time can be specified as a timestamp or duration. For example,
	//
	//   * "2021-01-02T15:04:05Z07:00"
	//   * "2021-01-02T15:04:05-0700"
	//   * "2021-01-02T15:04:05"
	//   * "2021-01-02"
	//   * "3h30m"
	ExpiresAt *string `json:"expiresAt,omitempty"`

	// A list of allowed CIDR ranges. An empty list indicates that all incoming requests are allowed.
	FirewallRanges []string `json:"firewallRanges"`

	// Name of the cluster
	Name string `json:"name"`

	// ID of the region where the new cluster is created
	RegionID string `json:"regionID"`

	// Size of the cluster, either in cluster size notation (e.g S-00) or in units (e.g. 0.25). The default value is "S-00".
	Size *string `json:"size,omitempty"`
}

// Represents the variables specified while updating a cluster
type ClusterUpdate struct {
	// The admin password for the cluster. The password must contain:
	//
	//   * At least 8 characters
	//   * At least one uppercase character
	//   * At least one lowercase character
	//   * At least one number or special character
	AdminPassword *string `json:"adminPassword,omitempty"`

	// The timestamp of when the cluster will expire. If the expiration time is not specified, the cluster will have no expiration time. Expiration time can be specified as a timestamp or duration. For example,
	//
	//   * "2021-01-02T15:04:05Z07:00"
	//   * "2021-01-02T15:04:05-0700"
	//   * "2021-01-02T15:04:05"
	//   * "2021-01-02"
	//   * "3h30m"
	ExpiresAt *string `json:"expiresAt,omitempty"`

	// A list of allowed CIDR ranges. An empty list indicates that all incoming requests are allowed.
	FirewallRanges *[]string `json:"firewallRanges,omitempty"`

	// Name of the cluster
	Name *string `json:"name,omitempty"`

	// Size of the cluster, either in cluster size notation (e.g S-00) or in units (e.g. 0.25). The default value is "S-00".
	Size *string `json:"size,omitempty"`
}

// Represents information related to a region in which a cluster is created
type Region struct {
	// Name of the provider
	Provider RegionProvider `json:"provider"`

	// Name of the region
	Region string `json:"region"`

	// ID of the region
	RegionID string `json:"regionID"`
}

// Name of the provider
type RegionProvider string

// ClusterId defines model for cluster-id.
type ClusterId string

// GetV0betaClustersParams defines parameters for GetV0betaClusters.
type GetV0betaClustersParams struct {
	// To include any terminated clusters, set to `true`
	IncludeTerminated *bool `json:"include-terminated,omitempty"`
}

// PostV0betaClustersJSONBody defines parameters for PostV0betaClusters.
type PostV0betaClustersJSONBody ClusterCreate

// PatchV0betaClustersClusterIdJSONBody defines parameters for PatchV0betaClustersClusterId.
type PatchV0betaClustersClusterIdJSONBody ClusterUpdate

// PostV0betaClustersJSONRequestBody defines body for PostV0betaClusters for application/json ContentType.
type PostV0betaClustersJSONRequestBody PostV0betaClustersJSONBody

// PatchV0betaClustersClusterIdJSONRequestBody defines body for PatchV0betaClustersClusterId for application/json ContentType.
type PatchV0betaClustersClusterIdJSONRequestBody PatchV0betaClustersClusterIdJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetV0betaClusters request
	GetV0betaClusters(ctx context.Context, params *GetV0betaClustersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV0betaClusters request with any body
	PostV0betaClustersWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV0betaClusters(ctx context.Context, body PostV0betaClustersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteV0betaClustersClusterId request
	DeleteV0betaClustersClusterId(ctx context.Context, clusterId ClusterId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV0betaClustersClusterId request
	GetV0betaClustersClusterId(ctx context.Context, clusterId ClusterId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchV0betaClustersClusterId request with any body
	PatchV0betaClustersClusterIdWithBody(ctx context.Context, clusterId ClusterId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchV0betaClustersClusterId(ctx context.Context, clusterId ClusterId, body PatchV0betaClustersClusterIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV0betaClustersClusterIdResume request
	PostV0betaClustersClusterIdResume(ctx context.Context, clusterId ClusterId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV0betaClustersClusterIdSuspend request
	PostV0betaClustersClusterIdSuspend(ctx context.Context, clusterId ClusterId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV0betaRegions request
	GetV0betaRegions(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetV0betaClusters(ctx context.Context, params *GetV0betaClustersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV0betaClustersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV0betaClustersWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV0betaClustersRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV0betaClusters(ctx context.Context, body PostV0betaClustersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV0betaClustersRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV0betaClustersClusterId(ctx context.Context, clusterId ClusterId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV0betaClustersClusterIdRequest(c.Server, clusterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV0betaClustersClusterId(ctx context.Context, clusterId ClusterId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV0betaClustersClusterIdRequest(c.Server, clusterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchV0betaClustersClusterIdWithBody(ctx context.Context, clusterId ClusterId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchV0betaClustersClusterIdRequestWithBody(c.Server, clusterId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchV0betaClustersClusterId(ctx context.Context, clusterId ClusterId, body PatchV0betaClustersClusterIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchV0betaClustersClusterIdRequest(c.Server, clusterId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV0betaClustersClusterIdResume(ctx context.Context, clusterId ClusterId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV0betaClustersClusterIdResumeRequest(c.Server, clusterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV0betaClustersClusterIdSuspend(ctx context.Context, clusterId ClusterId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV0betaClustersClusterIdSuspendRequest(c.Server, clusterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV0betaRegions(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV0betaRegionsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetV0betaClustersRequest generates requests for GetV0betaClusters
func NewGetV0betaClustersRequest(server string, params *GetV0betaClustersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v0beta/clusters")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.IncludeTerminated != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include-terminated", runtime.ParamLocationQuery, *params.IncludeTerminated); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV0betaClustersRequest calls the generic PostV0betaClusters builder with application/json body
func NewPostV0betaClustersRequest(server string, body PostV0betaClustersJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV0betaClustersRequestWithBody(server, "application/json", bodyReader)
}

// NewPostV0betaClustersRequestWithBody generates requests for PostV0betaClusters with any type of body
func NewPostV0betaClustersRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v0beta/clusters")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteV0betaClustersClusterIdRequest generates requests for DeleteV0betaClustersClusterId
func NewDeleteV0betaClustersClusterIdRequest(server string, clusterId ClusterId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "cluster-id", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v0beta/clusters/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV0betaClustersClusterIdRequest generates requests for GetV0betaClustersClusterId
func NewGetV0betaClustersClusterIdRequest(server string, clusterId ClusterId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "cluster-id", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v0beta/clusters/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchV0betaClustersClusterIdRequest calls the generic PatchV0betaClustersClusterId builder with application/json body
func NewPatchV0betaClustersClusterIdRequest(server string, clusterId ClusterId, body PatchV0betaClustersClusterIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchV0betaClustersClusterIdRequestWithBody(server, clusterId, "application/json", bodyReader)
}

// NewPatchV0betaClustersClusterIdRequestWithBody generates requests for PatchV0betaClustersClusterId with any type of body
func NewPatchV0betaClustersClusterIdRequestWithBody(server string, clusterId ClusterId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "cluster-id", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v0beta/clusters/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostV0betaClustersClusterIdResumeRequest generates requests for PostV0betaClustersClusterIdResume
func NewPostV0betaClustersClusterIdResumeRequest(server string, clusterId ClusterId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "cluster-id", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v0beta/clusters/%s/resume", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV0betaClustersClusterIdSuspendRequest generates requests for PostV0betaClustersClusterIdSuspend
func NewPostV0betaClustersClusterIdSuspendRequest(server string, clusterId ClusterId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "cluster-id", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v0beta/clusters/%s/suspend", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV0betaRegionsRequest generates requests for GetV0betaRegions
func NewGetV0betaRegionsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v0beta/regions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetV0betaClusters request
	GetV0betaClustersWithResponse(ctx context.Context, params *GetV0betaClustersParams, reqEditors ...RequestEditorFn) (*GetV0betaClustersResponse, error)

	// PostV0betaClusters request with any body
	PostV0betaClustersWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV0betaClustersResponse, error)

	PostV0betaClustersWithResponse(ctx context.Context, body PostV0betaClustersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV0betaClustersResponse, error)

	// DeleteV0betaClustersClusterId request
	DeleteV0betaClustersClusterIdWithResponse(ctx context.Context, clusterId ClusterId, reqEditors ...RequestEditorFn) (*DeleteV0betaClustersClusterIdResponse, error)

	// GetV0betaClustersClusterId request
	GetV0betaClustersClusterIdWithResponse(ctx context.Context, clusterId ClusterId, reqEditors ...RequestEditorFn) (*GetV0betaClustersClusterIdResponse, error)

	// PatchV0betaClustersClusterId request with any body
	PatchV0betaClustersClusterIdWithBodyWithResponse(ctx context.Context, clusterId ClusterId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchV0betaClustersClusterIdResponse, error)

	PatchV0betaClustersClusterIdWithResponse(ctx context.Context, clusterId ClusterId, body PatchV0betaClustersClusterIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchV0betaClustersClusterIdResponse, error)

	// PostV0betaClustersClusterIdResume request
	PostV0betaClustersClusterIdResumeWithResponse(ctx context.Context, clusterId ClusterId, reqEditors ...RequestEditorFn) (*PostV0betaClustersClusterIdResumeResponse, error)

	// PostV0betaClustersClusterIdSuspend request
	PostV0betaClustersClusterIdSuspendWithResponse(ctx context.Context, clusterId ClusterId, reqEditors ...RequestEditorFn) (*PostV0betaClustersClusterIdSuspendResponse, error)

	// GetV0betaRegions request
	GetV0betaRegionsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV0betaRegionsResponse, error)
}

type GetV0betaClustersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Cluster
}

// Status returns HTTPResponse.Status
func (r GetV0betaClustersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV0betaClustersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV0betaClustersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AdminPassword *string `json:"adminPassword,omitempty"`
		ClusterID     string  `json:"clusterID"`
	}
}

// Status returns HTTPResponse.Status
func (r PostV0betaClustersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV0betaClustersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteV0betaClustersClusterIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		ClusterID string `json:"clusterID"`
	}
}

// Status returns HTTPResponse.Status
func (r DeleteV0betaClustersClusterIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteV0betaClustersClusterIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV0betaClustersClusterIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Cluster
}

// Status returns HTTPResponse.Status
func (r GetV0betaClustersClusterIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV0betaClustersClusterIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchV0betaClustersClusterIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		ClusterID string `json:"clusterID"`
	}
}

// Status returns HTTPResponse.Status
func (r PatchV0betaClustersClusterIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchV0betaClustersClusterIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV0betaClustersClusterIdResumeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		ClusterID string `json:"clusterID"`
	}
}

// Status returns HTTPResponse.Status
func (r PostV0betaClustersClusterIdResumeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV0betaClustersClusterIdResumeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV0betaClustersClusterIdSuspendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		ClusterID string `json:"clusterID"`
	}
}

// Status returns HTTPResponse.Status
func (r PostV0betaClustersClusterIdSuspendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV0betaClustersClusterIdSuspendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV0betaRegionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Region
}

// Status returns HTTPResponse.Status
func (r GetV0betaRegionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV0betaRegionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetV0betaClustersWithResponse request returning *GetV0betaClustersResponse
func (c *ClientWithResponses) GetV0betaClustersWithResponse(ctx context.Context, params *GetV0betaClustersParams, reqEditors ...RequestEditorFn) (*GetV0betaClustersResponse, error) {
	rsp, err := c.GetV0betaClusters(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV0betaClustersResponse(rsp)
}

// PostV0betaClustersWithBodyWithResponse request with arbitrary body returning *PostV0betaClustersResponse
func (c *ClientWithResponses) PostV0betaClustersWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV0betaClustersResponse, error) {
	rsp, err := c.PostV0betaClustersWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV0betaClustersResponse(rsp)
}

func (c *ClientWithResponses) PostV0betaClustersWithResponse(ctx context.Context, body PostV0betaClustersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV0betaClustersResponse, error) {
	rsp, err := c.PostV0betaClusters(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV0betaClustersResponse(rsp)
}

// DeleteV0betaClustersClusterIdWithResponse request returning *DeleteV0betaClustersClusterIdResponse
func (c *ClientWithResponses) DeleteV0betaClustersClusterIdWithResponse(ctx context.Context, clusterId ClusterId, reqEditors ...RequestEditorFn) (*DeleteV0betaClustersClusterIdResponse, error) {
	rsp, err := c.DeleteV0betaClustersClusterId(ctx, clusterId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV0betaClustersClusterIdResponse(rsp)
}

// GetV0betaClustersClusterIdWithResponse request returning *GetV0betaClustersClusterIdResponse
func (c *ClientWithResponses) GetV0betaClustersClusterIdWithResponse(ctx context.Context, clusterId ClusterId, reqEditors ...RequestEditorFn) (*GetV0betaClustersClusterIdResponse, error) {
	rsp, err := c.GetV0betaClustersClusterId(ctx, clusterId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV0betaClustersClusterIdResponse(rsp)
}

// PatchV0betaClustersClusterIdWithBodyWithResponse request with arbitrary body returning *PatchV0betaClustersClusterIdResponse
func (c *ClientWithResponses) PatchV0betaClustersClusterIdWithBodyWithResponse(ctx context.Context, clusterId ClusterId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchV0betaClustersClusterIdResponse, error) {
	rsp, err := c.PatchV0betaClustersClusterIdWithBody(ctx, clusterId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchV0betaClustersClusterIdResponse(rsp)
}

func (c *ClientWithResponses) PatchV0betaClustersClusterIdWithResponse(ctx context.Context, clusterId ClusterId, body PatchV0betaClustersClusterIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchV0betaClustersClusterIdResponse, error) {
	rsp, err := c.PatchV0betaClustersClusterId(ctx, clusterId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchV0betaClustersClusterIdResponse(rsp)
}

// PostV0betaClustersClusterIdResumeWithResponse request returning *PostV0betaClustersClusterIdResumeResponse
func (c *ClientWithResponses) PostV0betaClustersClusterIdResumeWithResponse(ctx context.Context, clusterId ClusterId, reqEditors ...RequestEditorFn) (*PostV0betaClustersClusterIdResumeResponse, error) {
	rsp, err := c.PostV0betaClustersClusterIdResume(ctx, clusterId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV0betaClustersClusterIdResumeResponse(rsp)
}

// PostV0betaClustersClusterIdSuspendWithResponse request returning *PostV0betaClustersClusterIdSuspendResponse
func (c *ClientWithResponses) PostV0betaClustersClusterIdSuspendWithResponse(ctx context.Context, clusterId ClusterId, reqEditors ...RequestEditorFn) (*PostV0betaClustersClusterIdSuspendResponse, error) {
	rsp, err := c.PostV0betaClustersClusterIdSuspend(ctx, clusterId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV0betaClustersClusterIdSuspendResponse(rsp)
}

// GetV0betaRegionsWithResponse request returning *GetV0betaRegionsResponse
func (c *ClientWithResponses) GetV0betaRegionsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV0betaRegionsResponse, error) {
	rsp, err := c.GetV0betaRegions(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV0betaRegionsResponse(rsp)
}

// ParseGetV0betaClustersResponse parses an HTTP response from a GetV0betaClustersWithResponse call
func ParseGetV0betaClustersResponse(rsp *http.Response) (*GetV0betaClustersResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV0betaClustersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Cluster
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostV0betaClustersResponse parses an HTTP response from a PostV0betaClustersWithResponse call
func ParsePostV0betaClustersResponse(rsp *http.Response) (*PostV0betaClustersResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV0betaClustersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AdminPassword *string `json:"adminPassword,omitempty"`
			ClusterID     string  `json:"clusterID"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteV0betaClustersClusterIdResponse parses an HTTP response from a DeleteV0betaClustersClusterIdWithResponse call
func ParseDeleteV0betaClustersClusterIdResponse(rsp *http.Response) (*DeleteV0betaClustersClusterIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteV0betaClustersClusterIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			ClusterID string `json:"clusterID"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV0betaClustersClusterIdResponse parses an HTTP response from a GetV0betaClustersClusterIdWithResponse call
func ParseGetV0betaClustersClusterIdResponse(rsp *http.Response) (*GetV0betaClustersClusterIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV0betaClustersClusterIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Cluster
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchV0betaClustersClusterIdResponse parses an HTTP response from a PatchV0betaClustersClusterIdWithResponse call
func ParsePatchV0betaClustersClusterIdResponse(rsp *http.Response) (*PatchV0betaClustersClusterIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchV0betaClustersClusterIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			ClusterID string `json:"clusterID"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostV0betaClustersClusterIdResumeResponse parses an HTTP response from a PostV0betaClustersClusterIdResumeWithResponse call
func ParsePostV0betaClustersClusterIdResumeResponse(rsp *http.Response) (*PostV0betaClustersClusterIdResumeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV0betaClustersClusterIdResumeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			ClusterID string `json:"clusterID"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostV0betaClustersClusterIdSuspendResponse parses an HTTP response from a PostV0betaClustersClusterIdSuspendWithResponse call
func ParsePostV0betaClustersClusterIdSuspendResponse(rsp *http.Response) (*PostV0betaClustersClusterIdSuspendResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV0betaClustersClusterIdSuspendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			ClusterID string `json:"clusterID"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV0betaRegionsResponse parses an HTTP response from a GetV0betaRegionsWithResponse call
func ParseGetV0betaRegionsResponse(rsp *http.Response) (*GetV0betaRegionsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV0betaRegionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Region
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
